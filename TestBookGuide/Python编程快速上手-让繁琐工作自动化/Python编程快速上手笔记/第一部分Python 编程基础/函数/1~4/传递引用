要理解参数如何传递给函数，引用就特别重要。当函数被调用时，参数的值被
复制给变元。对于列表（以及字典，我将在下一章中讨论），这意味着变元得到的
是引用的拷贝。要看看这导致的后果，请打开一个新的文件编辑器窗口，输入以下
代码，并保存为 passingReference.py：
def eggs(someParameter):
someParameter.append('Hello')
spam = [1, 2, 3]
eggs(spam)
print(spam)
请注意，当 eggs()被调用时，没有使用返回值来为 spam 赋新值。相反，它直接
当场修改了该列表。在运行时，该程序产生输出如下：
[1, 2, 3, 'Hello']
尽管spam和someParameter 包含了不同的引用，但它们都指向相同的列表。这就是
为什么函数内的append('Hello')方法调用在函数调用返回后，仍然会对该列表产生影响。
请记住这种行为：如果忘了 Python 处理列表和字典变量时采用这种方式，可能
会导致令人困惑的缺陷。