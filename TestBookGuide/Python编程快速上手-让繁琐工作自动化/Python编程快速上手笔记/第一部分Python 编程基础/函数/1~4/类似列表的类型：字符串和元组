列表并不是唯一表示序列值的数据类型。例如，字符串和列表实际上很相似，
只要你认为字符串是单个文本字符的列表。对列表的许多操作，也可以作用于字符
串：按下标取值、切片、用于 for 循环、用于 len()，以及用于 in 和 not in 操作符。
>>> name = 'Zophie'
>>> name[0]
'Z'
>>> name[-2]
'i'
>>> name[0:4]
'Zoph'
Python 编程快速上手——让繁琐工作自动化
>>> 'Zo' in name
True
>>> 'z' in name
False
>>> 'p' not in name
False
>>> for i in name:
print('* * * ' + i + ' * * *')
* * * Z * * *
* * * o * * *
* * * p * * *
* * * h * * *
* * * i * * *
* * * e * * *
----------------------------------------------------
可变和不可变数据类型
但列表和字符串在一个重要的方面是不同的。列表是“可变的”数据类型，它
的值可以添加、删除或改变。但是，字符串是“不可变的”，它不能被更改。尝试
对字符串中的一个字符重新赋值，将导致 TypeError 错误。在交互式环境中输入以
下代码，你就会看到：
>>> name = 'Zophie a cat'
>>> name[7] = 'the'
Traceback (most recent call last):
File "<pyshell#50>", line 1, in <module>
name[7] = 'the'
TypeError: 'str' object does not support item assignment
“改变”一个字符串的正确方式，是使用切片和连接。构造一个“新的”字符
串，从老的字符串那里复制一些部分。在交互式环境中输入以下代码：
>>> name = 'Zophie a cat'
>>> newName = name[0:7] + 'the' + name[8:12]
>>> name
'Zophie a cat'
>>> newName
'Zophie the cat'
我们用[0:7]和[8:12]来指那些不想替换的字符。请注意，原来的'Zophie a cat'字
符串没有被修改，因为字符串是不可变的。尽管列表值是可变的，但下面代码中的
第二行并没有修改列表 eggs：
>>> eggs = [1, 2, 3]
>>> eggs = [4, 5, 6]
>>> eggs
[4, 5, 6]
这里 eggs 中的列表值并没有改变，而是整个新的不同的列表值([4, 5, 6])，覆写
了老的列表值。如图 4-2 所示。
如果你确实希望修改 eggs 中原来的列表，让它包含[4, 5, 6]，就要这样做：
>>> eggs = [1, 2, 3]
>>> del eggs[2]
>>> del eggs[1]
>>> del eggs[0]
>>> eggs.append(4)
>>> eggs.append(5)
>>> eggs.append(6)
>>> eggs
[4, 5, 6]
改变一个可变数据类型的值（就像前面例子中 del 语句和 append()方法所做的
事），当场改变了该值，因为该变量的值没有被一个新的列表值取代。
区分可变与不可变类型，似乎没有什么意义，但 4.7.1 节“传递引用”将解释，
使用可变参数和不可变参数调用函数时产生的不同行为。首先，让我们来看看元组
数据类型，它是列表数据类型的不可变形式。