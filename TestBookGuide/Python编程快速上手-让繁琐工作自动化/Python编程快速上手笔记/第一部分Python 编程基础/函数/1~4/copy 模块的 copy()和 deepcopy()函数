在处理列表和字典时，尽管传递引用常常是最方便的方法，但如果函数修改了
传入的列表或字典，你可能不希望这些变动影响原来的列表或字典。要做到这一点，
Python 提供了名为 copy 的模块，其中包含 copy()和 deepcopy()函数。第一个函数
copy.copy()，可以用来复制列表或字典这样的可变值，而不只是复制引用。在交互
式环境中输入以下代码：
>>> import copy
>>> spam = ['A', 'B', 'C', 'D']
>>> cheese = copy.copy(spam)
>>> cheese[1] = 42
>>> spam
['A', 'B', 'C', 'D']
>>> cheese
['A', 42, 'C', 'D']
现在 spam 和 cheese 变量指向独立的列表，这就是为什么当你将 42 赋给下标 7
时，只有 cheese 中的列表被改变。在图 4-7 中可以看到，两个变量的引用 ID 数字
不再一样，因为它们指向了独立的列表。
如果要复制的列表中包含了列表，那就使用 copy.deepcopy()函数来代替。
deepcopy()函数将同时复制它们内部的列表。

import copy
yu = ['A','B','C','D','E','F','G']
yu1 = copy.copy(yu)
yu1[1] = 42
print(yu)
print(yu1)